{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["fuse","Fuse","names","shouldSort","includeMatches","threshold","location","distance","maxPatternLength","minMatchCharLength","SpeechRecognition","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","SpeechRecognitionEvent","webkitSpeechRecognitionEvent","recognition","lang","interimResults","maxAlternatives","onnomatch","event","console","log","onerror","error","App","normal_image_uri","results","_useState","useState","_useState2","Object","slicedToArray","cardMatch","setCardMatch","_useState3","_useState4","recognitionInProgress","setRecogitionInProgress","handleResult","last","length","card","transcript","toLowerCase","handleSpeechEnd","stop","handleClick","start","useEffect","onresult","onspeechend","search","imageUris","item","_unused","react_default","a","createElement","className","Button_default","onClick","variant","size","disabled","src","alt","concat","height","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAeMA,EAAO,IAAIC,IAAKC,IATA,CACpBC,YAAY,EACZC,gBAAgB,EAChBC,UAAW,GACXC,SAAU,EACVC,SAAU,IACVC,iBAAkB,GAClBC,mBAAoB,IAMhBC,EAAoBA,GAAqBC,wBACzCC,EAAoBA,GAAqBC,wBACzCC,EACJA,GAA0BC,6BAGtBC,EAAc,IAAIN,EAGxBM,EAAYC,KAAO,QACnBD,EAAYE,gBAAiB,EAC7BF,EAAYG,gBAAkB,GAE9BH,EAAYI,UAAY,SAASC,GAC/BC,QAAQC,IAAI,kCAGdP,EAAYQ,QAAU,SAASH,GAC7BC,QAAQC,IAAI,kCAAoCF,EAAMI,QAuFzCC,MApFf,WAAe,IA6BTC,EACAC,EA9BSC,EACqBC,mBAAS,IAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACKI,EADLJ,EAAA,GAAAK,EAE4CN,oBAAS,GAFrDO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEiBE,EAFjBF,EAAA,GAIb,SAASG,EAAanB,GACpB,IAAIoB,EAAOpB,EAAMO,QAAQc,OAAS,EAC5BC,EAAOtB,EAAMO,QAAQa,GAAM,GAAGG,WAEpCT,GAAcQ,GAAQ,IAAIE,eAG5B,SAASC,IACP9B,EAAY+B,OACZR,GAAwB,GAG1B,SAASS,IACFV,IACHC,GAAwB,GACxBvB,EAAYiC,QACZ3B,QAAQC,IAAI,yBAYhB,GARA2B,oBAAU,WACRlC,EAAYmC,SAAWX,EACvBxB,EAAYoC,YAAcN,GACzB,IAKCZ,EAAW,CACbN,EAAU5B,EAAKqD,OAAOnB,GAEtB,IACEP,EAAmB2B,IAAU1B,EAAQ,GAAG2B,MACxC,MAAAC,GACA7B,EAAmB,IAIvB,OACE8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEE,UAAU,cACVE,QAASd,EACTe,QAAQ,YACRC,KAAK,QACLC,SAAU3B,GAETA,EAAwB,YAAc,4BAEzCmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZjC,EACC8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OACEO,IAAKvC,EACLwC,IAAG,4BAAAC,OAA8BlC,GACjCmC,OAAO,QAETZ,EAAAC,EAAAC,cAAA,OACEO,IAAKvC,EACLwC,IAAG,4BAAAC,OAA8BlC,GACjCmC,OAAO,MACPT,UAAU,iBAIdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAGnBH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,QAASd,EACTgB,KAAK,QACLD,QAAQ,YACRE,SAAU3B,GAETA,EAAwB,YAAc,8BC1G3BgC,QACW,cAA7BC,OAAOjE,SAASkE,UAEe,UAA7BD,OAAOjE,SAASkE,UAEhBD,OAAOjE,SAASkE,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a2c82f85.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Fuse from \"fuse.js\";\nimport { names, imageUris } from \"./cardsArray.json\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\n\nconst searchOptions = {\n  shouldSort: true,\n  includeMatches: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1\n};\nconst fuse = new Fuse(names, searchOptions);\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API/Using_the_Web_Speech_API\n/* eslint-disable */\nconst SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\nconst SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\nconst SpeechRecognitionEvent =\n  SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n/* eslint-enable */\n\nconst recognition = new SpeechRecognition();\n\n//recognition.continuous = false;\nrecognition.lang = \"en-US\";\nrecognition.interimResults = false;\nrecognition.maxAlternatives = 10;\n\nrecognition.onnomatch = function(event) {\n  console.log(\"I didnt recognise that color.\");\n};\n\nrecognition.onerror = function(event) {\n  console.log(\"Error occurred in recognition: \" + event.error);\n};\n\nfunction App() {\n  const [cardMatch, setCardMatch] = useState(\"\");\n  const [recognitionInProgress, setRecogitionInProgress] = useState(false);\n\n  function handleResult(event) {\n    var last = event.results.length - 1;\n    const card = event.results[last][0].transcript;\n\n    setCardMatch((card || \"\").toLowerCase());\n  }\n\n  function handleSpeechEnd() {\n    recognition.stop();\n    setRecogitionInProgress(false);\n  }\n\n  function handleClick() {\n    if (!recognitionInProgress) {\n      setRecogitionInProgress(true);\n      recognition.start();\n      console.log(\"Ready to hear a card\");\n    }\n  }\n\n  useEffect(() => {\n    recognition.onresult = handleResult;\n    recognition.onspeechend = handleSpeechEnd;\n  }, []);\n\n  let normal_image_uri;\n  let results;\n\n  if (cardMatch) {\n    results = fuse.search(cardMatch);\n    // console.log(results);\n    try {\n      normal_image_uri = imageUris[results[0].item];\n    } catch {\n      normal_image_uri = \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Button\n        className=\"upside-down\"\n        onClick={handleClick}\n        variant=\"contained\"\n        size=\"large\"\n        disabled={recognitionInProgress}\n      >\n        {recognitionInProgress ? \"listening\" : \"Click to start recording\"}\n      </Button>\n      <div className=\"card-display\">\n        {normal_image_uri ? (\n          <div className=\"cards\">\n            <img\n              src={normal_image_uri}\n              alt={`Magic The Gathering Card ${cardMatch}`}\n              height=\"350\"\n            />\n            <img\n              src={normal_image_uri}\n              alt={`Magic The Gathering Card ${cardMatch}`}\n              height=\"350\"\n              className=\"upside-down\"\n            />\n          </div>\n        ) : (\n          <div className=\"spacer\" />\n        )}\n      </div>\n      <Button\n        onClick={handleClick}\n        size=\"large\"\n        variant=\"contained\"\n        disabled={recognitionInProgress}\n      >\n        {recognitionInProgress ? \"listening\" : \"Click to start recording\"}\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}